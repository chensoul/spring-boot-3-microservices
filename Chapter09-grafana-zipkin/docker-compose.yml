name: ecommerce

services:
  config-server:
    image: chensoul/config-server
    environment:
      - SPRING_PROFILES_ACTIVE=native,docker
    volumes:
      - ./spring-cloud/config-server/src/main/resources/config-repo:/config-repo
    ports:
      - "8888:8888"
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://config-server:8888" ]
      interval: 5s
      timeout: 5s
      retries: 10

  eureka:
    image: chensoul/eureka
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://eureka:8761" ]
      interval: 5s
      timeout: 3s
      retries: 10
    depends_on:
      config-server:
        condition: service_healthy

  gateway:
    image: chensoul/gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8443:8443"
    depends_on:
      eureka:
        condition: service_healthy

  authorization:
    image: chensoul/authorization
    environment:
      - SPRING_PROFILES_ACTIVE=docker
  
  customer-service:
    image: chensoul/customer-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongodb:
        condition: service_healthy

  notification-service:
    image: chensoul/notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongodb:
        condition: service_healthy

  order-service:
    image: chensoul/order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8040:8080"
    depends_on:
      postgres:
        condition: service_healthy

  payment-service:
    image: chensoul/payment-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres:
        condition: service_healthy

  product-service:
    image: chensoul/product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:17
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 10

  mongodb:
    image: mongo:8
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: ecommerce
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: pass
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://user:pass@localhost:27017/?authSource=${DB_NAME} --quiet
      interval: 5s
      timeout: 2s
      retries: 10
  
  maildev:
    image: maildev/maildev
    environment:
      TZ: Asia/Shanghai
      MAILDEV_OUTGOING_USER: user
      MAILDEV_OUTGOING_PASS: pass
    ports:
      - "1080:1080"
      - "1025:1025"

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  ## Grafana / Prometheus
  prometheus:
    image: prom/prometheus
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    deploy:
      resources:
        limits:
          memory: 256M
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    deploy:
      resources:
        limits:
          memory: 256M
    ports:
      - "3000:3000"


  zipkin:
    image: openzipkin/zipkin
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      - JAVA_OPTS=-XX:+UnlockExperimentalVMOptions -Djava.security.egd=file:/dev/./urandom
    ports:
      - "9411:9411"
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://zipkin:9411" ]
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  postgres:
  mongo:
