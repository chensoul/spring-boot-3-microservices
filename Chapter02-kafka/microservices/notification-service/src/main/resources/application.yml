spring.application.name: notification-service
server.port: 8081
server.shutdown: graceful

notification.order-event-exchange: order-exchange
notification.new-order-queue: new-order
notification.delivered-order-queue: delivered-order
notification.cancelled-order-queue: cancelled-order
notification.error-order-queue: error-order
notification.support-email: ichensoul@gmail.com

management.endpoints.web.exposure.include: "*"
management.metrics.tags.application: "${spring.application.name}"

spring:
  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: notificationGroup
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
        spring.json.type.mapping: orderCreatedEvent:com.chensoul.bookstore.order.OrderCreatedEvent,orderDeliveredEvent:com.chensoul.bookstore.order.OrderDeliveredEvent,orderCancelledEvent:com.chensoul.bookstore.order.OrderCancelledEvent,orderErrorEvent:com.chensoul.bookstore.order.OrderErrorEvent
    producer: # for test
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

spring.mail.host: 127.0.0.1
spring.mail.port: 1025
spring.mail.username: PLACEHOLDER
spring.mail.password: PLACEHOLDER
spring.mail.properties.mail.smtp.auth: true
spring.mail.properties.mail.smtp.starttls.enable: true

spring.data.mongodb.host: localhost
spring.data.mongodb.port: 27017
spring.data.mongodb.database: mongodb
spring.data.mongodb.username: user
spring.data.mongodb.password: pass
spring.data.mongodb.authentication-database: admin


---
spring.config.activate.on-profile: docker

spring.rabbitmq.host: rabbitmq

spring.mail.host: mailhog

spring.data.mongodb.host: mongodb
