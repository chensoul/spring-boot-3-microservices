<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.3.4</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <groupId>com.chensoul</groupId>
  <artifactId>chensoul-parent</artifactId>
  <packaging>pom</packaging>
  <version>0.0.1-SNAPSHOT</version>

  <properties>
    <java.version>21</java.version>

    <!-- The spring-boot version should be the same as the parent version above -->
    <spring-boot.version>3.3.4</spring-boot.version>
    <therapi-runtime-javadoc.version>0.15.0</therapi-runtime-javadoc.version>

    <maven-gpg-plugin.version>3.2.7</maven-gpg-plugin.version>
    <nexus-staging-maven-plugin.version>1.7.0</nexus-staging-maven-plugin.version>
    <dependency-check-maven.version>11.0.0</dependency-check-maven.version>
    <spotless.version>2.43.0</spotless.version>
    <sonar-maven-plugin.version>4.0.0.4121</sonar-maven-plugin.version>
    <sonar.properties>sonar-project.properties</sonar.properties>
    <jacoco-maven-plugin.version>0.8.12</jacoco-maven-plugin.version>
    <jacoco.minimum.coverage>0.80</jacoco.minimum.coverage>

    <sonar.exclusions>src/main/java/**/config/*.*</sonar.exclusions>
    <sonar.test.inclusions>**/*Test.java,**/*IntegrationTest.java,**/*IT.java</sonar.test.inclusions>
    <sonar.junit.reportPaths>target/surefire-reports,target/failsafe-reports</sonar.junit.reportPaths>
    <sonar.core.codeCoveragePlugin>jacoco</sonar.core.codeCoveragePlugin>
    <sonar.coverage.jacoco.xmlReportPaths>target/site/**/jacoco*.xml</sonar.coverage.jacoco.xmlReportPaths>
  </properties>

  <modules>
    <module>chensoul-dependencies</module>
    <module>chensoul-framework</module>
  </modules>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths>
            <!-- https://springdoc.org/#javadoc-support -->
            <path>
              <groupId>com.github.therapi</groupId>
              <artifactId>therapi-runtime-javadoc-scribe</artifactId>
              <version>${therapi-runtime-javadoc.version}</version>
            </path>

            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${lombok.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

      <plugin>
        <groupId>io.github.git-commit-id</groupId>
        <artifactId>git-commit-id-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <dateFormatTimeZone>${user.timezone}</dateFormatTimeZone>
          <failOnNoGitDirectory>false</failOnNoGitDirectory>
          <failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
          <generateGitPropertiesFile>true</generateGitPropertiesFile>
          <includeOnlyProperties>
            <includeOnlyProperty>^git.branch$</includeOnlyProperty>
            <includeOnlyProperty>^git.commit.id.abbrev$</includeOnlyProperty>
            <includeOnlyProperty>^git.commit.user.name$</includeOnlyProperty>
            <includeOnlyProperty>^git.commit.message.full$</includeOnlyProperty>
          </includeOnlyProperties>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <runOrder>alphabetical</runOrder>
          <excludes>
            <exclude>**/*IT*</exclude>
            <exclude>**/*IntTest*</exclude>
            <exclude>**/*IntegrationTest*</exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <runOrder>alphabetical</runOrder>
          <includes>
            <include>**/*IT*</include>
            <include>**/*IntTest*</include>
            <include>**/*IntegrationTest*</include>
          </includes>
        </configuration>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <configuration>
          <rules>
            <rule>
              <element>BUNDLE</element>
              <limits>
                <limit>
                  <counter>COMPLEXITY</counter>
                  <value>COVEREDRATIO</value>
                  <minimum>${jacoco.minimum.coverage}</minimum>
                </limit>
              </limits>
            </rule>
          </rules>
          <excludes>
            <exclude>**/config/**</exclude>
            <exclude>**/model/*</exclude>
            <exclude>**/exception/*</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>pre-unit-tests</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <!-- Ensures that the code coverage report for unit tests is created after unit tests have been run -->
          <execution>
            <id>post-unit-test</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>pre-integration-tests</id>
            <goals>
              <goal>prepare-agent-integration</goal>
            </goals>
          </execution>
          <!-- Ensures that the code coverage report for integration tests is created after integration tests have been run -->
          <execution>
            <id>post-integration-tests</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report-integration</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless.version}</version>
        <configuration>
          <java>
            <palantirJavaFormat>
              <version>2.47.0</version>
            </palantirJavaFormat>
            <importOrder/>
            <removeUnusedImports/>
            <formatAnnotations/>
          </java>
        </configuration>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.owasp</groupId>
        <artifactId>dependency-check-maven</artifactId>
        <version>${dependency-check-maven.version}</version>
        <configuration>
          <failOnError>false</failOnError>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
        <version>${sonar-maven-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>sonar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>springboot</id>
      <activation>
        <file>
          <!-- Just a way to identify a Spring Boot application -->
          <exists>src/main/resources/application.yml</exists>
        </file>
      </activation>
      <properties>
        <maven.deploy.skip>true</maven.deploy.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>build-info</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <!--
              mvn spring-boot:build-image \
              -Dspring-boot.build-image.imageName=xx \
              -Dspring-boot.build-image.builder=paketobuildpacks/builder-jammy-full \
              -Dspring-boot.build-image.publish=true
              -->
              <image>
                <name>${env.USER}/${project.artifactId}</name>
                <!-- 该镜像包含 curl -->
                <builder>paketobuildpacks/builder-jammy-full</builder>
                <env>
                  <!-- Make sure `mvn spring-boot:build-image` uses the Java version defined in this project -->
                  <BP_JVM_VERSION>${java.version}</BP_JVM_VERSION>
                </env>
              </image>
              <docker>
                <publishRegistry>
                  <username>${docker.publishRegistry.username}</username>
                  <password>${docker.publishRegistry.password}</password>
                </publishRegistry>
              </docker>
              <additionalProperties>
                <java.version>${java.version}</java.version>
              </additionalProperties>
              <!--
              Enable the line below to have remote debugging of your application on port 5005
              <jvmArguments>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</jvmArguments>
              -->
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>deploy-github</id>
      <activation>
        <property>
          <name>github</name>
          <value>true</value>
        </property>
      </activation>
      <distributionManagement>
        <snapshotRepository>
          <id>github</id>
          <url>https://maven.pkg.github.com/chensoul/chensoul-bom/</url>
        </snapshotRepository>
        <repository>
          <id>github</id>
          <url>https://maven.pkg.github.com/chensoul/chensoul-bom/</url>
        </repository>
      </distributionManagement>
    </profile>

    <profile>
      <id>deploy-central</id>
      <activation>
        <property>
          <name>!github</name>
        </property>
      </activation>
      <distributionManagement>
        <snapshotRepository>
          <id>ossrh</id>
          <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
          <id>ossrh</id>
          <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
      </distributionManagement>
      <build>
        <plugins>
          <!--  https://www.sonatype.com/blog/2010/01/how-to-generate-pgp-signatures-with-maven -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>${maven-gpg-plugin.version}</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <version>${nexus-staging-maven-plugin.version}</version>
            <extensions>true</extensions>
            <configuration>
              <serverId>ossrh</serverId>
              <nexusUrl>https://oss.sonatype.org/</nexusUrl>
              <autoReleaseAfterClose>true</autoReleaseAfterClose>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Deployment profile (required by https://github.com/samuelmeuli/action-maven-publish ) -->
    <profile>
      <id>deploy</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>${maven-gpg-plugin.version}</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
                <configuration>
                  <!-- Prevent `gpg` from using pinentry programs -->
                  <gpgArguments>
                    <arg>--pinentry-mode</arg>
                    <arg>loopback</arg>
                  </gpgArguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
