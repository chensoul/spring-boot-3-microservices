---
alwaysApply: true
---

# Spring Boot 技术栈开发规范

- **目标**：为 Spring Boot + MyBatis Plus + MySQL 技术栈项目提供分层开发规范
- **适用范围**：基于 Spring Boot 的后端应用开发
- **优先级**：根据项目复杂度选择适用的规范

## 规范文档结构

本规范已拆分为多个专门的文档，请根据项目需求选择适用的规范：

### 核心规范（所有项目必需）
- **[Spring Boot 核心规范](spring-boot-core.mdc)** - Spring Boot 基础开发规范
- **[数据库开发规范](database.mdc)** - MySQL + MyBatis Plus 开发规范
- **[缓存开发规范](redis.mdc)** - Redis 缓存开发规范
- **[质量保证规范](quality-assurance.mdc)** - 测试、代码质量、性能规范
- **[团队协作规范](team-collaboration.mdc)** - Git 工作流、CI/CD、文档管理

### 高级规范（根据项目需求选择）
- **[微服务开发规范](spring-cloud.mdc)** - 微服务架构开发规范
- **[高级架构规范](advanced-architecture.mdc)** - 多租户、消息队列、事件驱动等高级架构

## 项目类型与规范选择

### 单体应用
- 使用核心规范
- 适合：中小型项目、快速开发、团队规模较小
- 规范文档：spring-boot-core.mdc + database.mdc + redis.mdc + quality-assurance.mdc + team-collaboration.mdc

### 微服务应用
- 使用核心规范 + 微服务相关规范
- 适合：大型项目、多团队协作、高并发场景
- 规范文档：所有核心规范 + spring-cloud.mdc

### 多租户应用
- 使用核心规范 + 多租户相关规范
- 适合：SaaS 应用、多客户服务
- 规范文档：所有核心规范 + advanced-architecture.mdc（多租户部分）

### 消息驱动应用
- 使用核心规范 + 消息队列相关规范
- 适合：需要异步处理、系统解耦的应用
- 规范文档：所有核心规范 + advanced-architecture.mdc（消息队列部分）

## 架构决策指导

### 什么时候需要微服务架构？
- 团队规模 > 20人
- 业务复杂度高，需要独立部署
- 不同模块有不同的技术栈需求
- 需要独立扩展不同模块

### 什么时候需要消息队列？
- 需要异步处理
- 需要系统解耦
- 需要削峰填谷
- 需要事件驱动架构

### 什么时候需要多租户架构？
- 需要为多个客户提供服务
- 数据需要隔离
- 需要按租户定制化

### 什么时候需要高级架构模式？
- 业务复杂度高
- 需要高可用性
- 需要高性能
- 需要特殊业务需求

---

**注意**：请根据项目实际需求选择合适的规范文档，避免过度设计。建议从核心规范开始，根据项目发展需要逐步引入高级规范。