---
alwaysApply: true
---
# 团队协作规范

- **目标**：规范团队协作流程，提高开发效率和代码质量
- **适用范围**：所有 Spring Boot 项目团队
- **优先级**：强制遵循；团队协作的基础规范

## 一、Git 工作流

### 1. 分支策略

* **主分支**：`main` 分支用于生产环境，`develop` 分支用于开发环境
* **功能分支**：`feature/功能名称` 用于新功能开发
* **修复分支**：`hotfix/修复内容` 用于紧急修复
* **发布分支**：`release/版本号` 用于版本发布

### 2. 分支命名规范

```
feature/user-authentication    # 功能分支
hotfix/fix-login-bug          # 热修复分支
release/v1.2.0                # 发布分支
bugfix/payment-error          # 缺陷修复分支
```

### 3. 提交规范

* **Conventional Commits**：使用标准化的提交信息格式
* **提交类型**：feat、fix、docs、style、refactor、test、chore
* **提交格式**：`<type>(<scope>): <description>`

```
feat(auth): add JWT authentication
fix(api): resolve user creation bug
docs(readme): update installation guide
style(code): format code with spotless
refactor(service): extract common logic
test(unit): add user service tests
chore(deps): update spring boot version
```

### 4. 代码评审

* **强制评审**：所有代码必须经过同行评审才能合并
* **评审重点**：代码质量、安全性、性能、可维护性
* **评审工具**：使用 GitHub/GitLab 的 Pull Request/Merge Request 功能

## 二、持续集成

### 1. 自动化构建

* **触发条件**：代码提交触发自动构建
* **构建内容**：编译、测试、静态检查、打包
* **构建工具**：GitHub Actions、GitLab CI、Jenkins

### 2. 质量门禁

* **代码格式**：Spotless 格式化检查
* **静态分析**：SonarQube 质量检查
* **测试覆盖**：JaCoCo 覆盖率检查
* **安全扫描**：依赖漏洞扫描

### 3. 部署流程

* **环境隔离**：开发、测试、预生产、生产环境
* **自动化部署**：测试环境自动部署，生产环境手动部署
* **回滚机制**：支持快速回滚到上一个稳定版本

## 三、文档管理

### 1. API 文档

* **工具**：使用 Swagger/OpenAPI 自动生成
* **同步更新**：API 变更时同步更新文档
* **版本控制**：文档版本与代码版本对应

### 2. 架构文档

* **设计决策**：记录重要的架构决策和变更原因
* **定期更新**：保持文档与代码同步
* **版本历史**：记录文档的版本变更历史

### 3. 运维文档

* **部署手册**：详细的部署步骤和配置说明
* **监控手册**：监控指标和告警配置
* **故障处理**：常见问题的解决方案

## 四、代码规范

### 1. 代码风格

* **格式化**：使用 Spotless 统一代码格式
* **命名规范**：遵循 Java 命名规范
* **注释规范**：复杂逻辑必须添加中文注释

### 2. 代码审查

* **审查清单**：
  - [ ] 代码逻辑正确性
  - [ ] 异常处理完整性
  - [ ] 性能考虑
  - [ ] 安全性检查
  - [ ] 可维护性
  - [ ] 测试覆盖

### 3. 重构规范

* **小步重构**：每次重构保持小步快跑
* **测试先行**：重构前确保有足够的测试覆盖
* **向后兼容**：避免破坏性变更

## 五、项目管理

### 1. 任务管理

* **任务分解**：将大任务分解为小的可执行任务
* **优先级**：明确任务的优先级和截止时间
* **进度跟踪**：定期跟踪任务进度和状态

### 2. 沟通协作

* **日常沟通**：使用 Slack/钉钉等工具进行日常沟通
* **技术讨论**：定期进行技术分享和讨论
* **问题反馈**：及时反馈和解决问题

### 3. 知识分享

* **技术分享**：定期进行技术分享会
* **文档沉淀**：将经验沉淀为文档
* **最佳实践**：总结和推广最佳实践

## 六、环境管理

### 1. 开发环境

* **本地环境**：使用 Docker Compose 搭建本地开发环境
* **IDE 配置**：统一 IDE 配置和插件
* **代码格式化**：配置自动格式化

### 2. 测试环境

* **环境隔离**：测试环境与生产环境隔离
* **数据管理**：使用测试数据进行测试
* **环境重置**：支持快速重置测试环境

### 3. 生产环境

* **权限管理**：严格控制生产环境访问权限
* **变更管理**：所有变更必须经过审批
* **监控告警**：完善的监控和告警机制

## 七、安全规范

### 1. 代码安全

* **敏感信息**：禁止在代码中硬编码敏感信息
* **依赖安全**：定期更新依赖，扫描安全漏洞
* **输入验证**：对所有输入进行验证和过滤

### 2. 访问控制

* **权限最小化**：遵循最小权限原则
* **多因素认证**：重要系统启用多因素认证
* **审计日志**：记录所有重要操作

### 3. 数据保护

* **数据加密**：敏感数据加密存储
* **数据备份**：定期备份重要数据
* **数据脱敏**：测试环境使用脱敏数据

## 八、性能优化

### 1. 性能监控

* **关键指标**：响应时间、吞吐量、错误率
* **监控工具**：使用 APM 工具进行性能监控
* **告警机制**：设置性能阈值告警

### 2. 性能测试

* **压力测试**：定期进行压力测试
* **性能基线**：建立性能基线
* **性能回归**：防止性能退化

### 3. 优化策略

* **缓存策略**：合理使用缓存
* **数据库优化**：优化数据库查询
* **代码优化**：优化关键代码路径

## 九、故障处理

### 1. 故障响应

* **响应时间**：P0 故障 15 分钟内响应
* **处理流程**：建立标准化的故障处理流程
* **升级机制**：建立故障升级机制

### 2. 故障分析

* **根因分析**：深入分析故障根本原因
* **改进措施**：制定改进措施防止类似故障
* **经验总结**：将故障处理经验沉淀为文档

### 3. 预防措施

* **监控完善**：完善监控覆盖
* **测试充分**：提高测试覆盖率
* **代码质量**：提高代码质量

## 十、团队建设

### 1. 技能提升

* **技术培训**：定期进行技术培训
* **实践项目**：通过实践项目提升技能
* **外部学习**：鼓励参加外部技术会议

### 2. 团队文化

* **开放透明**：建立开放透明的团队文化
* **持续改进**：鼓励持续改进和创新
* **知识共享**：促进知识共享和协作

### 3. 激励机制

* **技术认可**：认可技术贡献
* **成长机会**：提供成长机会
* **团队活动**：组织团队建设活动

---

**适用场景**：所有 Spring Boot 项目团队，无论团队规模大小，都应遵循此团队协作规范。