spring.application.name: bookstore-order
server.port: 8082
server.shutdown: graceful
server.forward-headers-strategy: framework
spring.mvc.problemdetails.enabled: true

order.product-url: http://localhost:8083
order.order-event-exchange: order-exchange
order.new-order-queue: new-order
order.delivered-order-queue: delivered-order
order.cancelled-order-queue: cancelled-order
order.error-order-queue: error-order
order.publish-order-events-job-cron: "*/5 * * * * *"
order.new-order-job-cron: "*/10 * * * * *"

management.endpoints.web.exposure.include: "*"
management.metrics.tags.application: "${spring.application.name}"

spring.security.oauth2.resourceserver.jwt.issuer-uri: http://localhost:9000

spring.datasource.url: jdbc:postgresql://localhost:15432/postgres
spring.datasource.username: postgres
spring.datasource.password: postgres
spring.jpa.open-in-view: false
spring.jpa.show-sql: true

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    notification-out-0:
      destination: notification
      producer:
        required-groups: auditGroup

spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

resilience4j.retry.backends.bookstore-product.max-attempts: 2
resilience4j.retry.backends.bookstore-product.wait-duration: 1s
resilience4j.circuitbreaker.backends.bookstore-product.sliding-window-type: COUNT_BASED
resilience4j.circuitbreaker.backends.bookstore-product.sliding-window-size: 6
resilience4j.circuitbreaker.backends.bookstore-product.minimum-number-of-calls: 4
resilience4j.circuitbreaker.backends.bookstore-product.wait-duration-in-open-state: 20s
resilience4j.circuitbreaker.backends.bookstore-product.permitted-number-of-calls-in-half-open-state: 2
resilience4j.circuitbreaker.backends.bookstore-product.failure-rate-threshold: 50


---
spring.config.activate.on-profile: docker

order.product-url: http://bookstore-product:8083

spring.security.oauth2.resourceserver.jwt.issuer-uri: http://spring-authorization-server:9000

spring.datasource.url: jdbc:postgresql://postgres-order:5432/postgres

spring.data.mongodb.host: mongodb


---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.notification-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

---
spring.config.activate.on-profile: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka
spring.kafka.bootstrap-servers: kafka:9092
spring.cloud.stream.kafka.binder.replication-factor: 1
